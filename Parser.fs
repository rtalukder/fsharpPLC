// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

	 (* File Project/Parser.fsy 
		Parser for HawkFun, a toy language that is purely functional, strict, statically-typed, lexically-scoped, and higher-order.
		Ciera Headley
		Raquib Talukder
	  *)

	 open Absyn;

# 16 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | LPAR
  | RPAR
  | FN
  | FUN
  | LOCAL
  | EQ
  | NE
  | LT
  | LTE
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | APPEND
  | SEMICOLON
  | ARROW
  | ARROWT
  | COL
  | NOT
  | HD
  | TL
  | ISE
  | LIST
  | PRINT
  | ELSE
  | END
  | FALSE
  | IF
  | IN
  | LET
  | THEN
  | TRUE
  | NULL
  | REC
  | BOOL
  | INT
  | UNIT
  | VAR
  | ELISTC
  | NAME of (string)
  | CSNINT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_FN
    | TOKEN_FUN
    | TOKEN_LOCAL
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_LT
    | TOKEN_LTE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_APPEND
    | TOKEN_SEMICOLON
    | TOKEN_ARROW
    | TOKEN_ARROWT
    | TOKEN_COL
    | TOKEN_NOT
    | TOKEN_HD
    | TOKEN_TL
    | TOKEN_ISE
    | TOKEN_LIST
    | TOKEN_PRINT
    | TOKEN_ELSE
    | TOKEN_END
    | TOKEN_FALSE
    | TOKEN_IF
    | TOKEN_IN
    | TOKEN_LET
    | TOKEN_THEN
    | TOKEN_TRUE
    | TOKEN_NULL
    | TOKEN_REC
    | TOKEN_BOOL
    | TOKEN_INT
    | TOKEN_UNIT
    | TOKEN_VAR
    | TOKEN_ELISTC
    | TOKEN_NAME
    | TOKEN_CSNINT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_expr
    | NONTERM_atExpr

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | LPAR  -> 1 
  | RPAR  -> 2 
  | FN  -> 3 
  | FUN  -> 4 
  | LOCAL  -> 5 
  | EQ  -> 6 
  | NE  -> 7 
  | LT  -> 8 
  | LTE  -> 9 
  | PLUS  -> 10 
  | MINUS  -> 11 
  | TIMES  -> 12 
  | DIV  -> 13 
  | APPEND  -> 14 
  | SEMICOLON  -> 15 
  | ARROW  -> 16 
  | ARROWT  -> 17 
  | COL  -> 18 
  | NOT  -> 19 
  | HD  -> 20 
  | TL  -> 21 
  | ISE  -> 22 
  | LIST  -> 23 
  | PRINT  -> 24 
  | ELSE  -> 25 
  | END  -> 26 
  | FALSE  -> 27 
  | IF  -> 28 
  | IN  -> 29 
  | LET  -> 30 
  | THEN  -> 31 
  | TRUE  -> 32 
  | NULL  -> 33 
  | REC  -> 34 
  | BOOL  -> 35 
  | INT  -> 36 
  | UNIT  -> 37 
  | VAR  -> 38 
  | ELISTC  -> 39 
  | NAME _ -> 40 
  | CSNINT _ -> 41 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_LPAR 
  | 2 -> TOKEN_RPAR 
  | 3 -> TOKEN_FN 
  | 4 -> TOKEN_FUN 
  | 5 -> TOKEN_LOCAL 
  | 6 -> TOKEN_EQ 
  | 7 -> TOKEN_NE 
  | 8 -> TOKEN_LT 
  | 9 -> TOKEN_LTE 
  | 10 -> TOKEN_PLUS 
  | 11 -> TOKEN_MINUS 
  | 12 -> TOKEN_TIMES 
  | 13 -> TOKEN_DIV 
  | 14 -> TOKEN_APPEND 
  | 15 -> TOKEN_SEMICOLON 
  | 16 -> TOKEN_ARROW 
  | 17 -> TOKEN_ARROWT 
  | 18 -> TOKEN_COL 
  | 19 -> TOKEN_NOT 
  | 20 -> TOKEN_HD 
  | 21 -> TOKEN_TL 
  | 22 -> TOKEN_ISE 
  | 23 -> TOKEN_LIST 
  | 24 -> TOKEN_PRINT 
  | 25 -> TOKEN_ELSE 
  | 26 -> TOKEN_END 
  | 27 -> TOKEN_FALSE 
  | 28 -> TOKEN_IF 
  | 29 -> TOKEN_IN 
  | 30 -> TOKEN_LET 
  | 31 -> TOKEN_THEN 
  | 32 -> TOKEN_TRUE 
  | 33 -> TOKEN_NULL 
  | 34 -> TOKEN_REC 
  | 35 -> TOKEN_BOOL 
  | 36 -> TOKEN_INT 
  | 37 -> TOKEN_UNIT 
  | 38 -> TOKEN_VAR 
  | 39 -> TOKEN_ELISTC 
  | 40 -> TOKEN_NAME 
  | 41 -> TOKEN_CSNINT 
  | 44 -> TOKEN_end_of_input
  | 42 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_expr 
    | 3 -> NONTERM_expr 
    | 4 -> NONTERM_expr 
    | 5 -> NONTERM_expr 
    | 6 -> NONTERM_expr 
    | 7 -> NONTERM_expr 
    | 8 -> NONTERM_expr 
    | 9 -> NONTERM_expr 
    | 10 -> NONTERM_expr 
    | 11 -> NONTERM_expr 
    | 12 -> NONTERM_expr 
    | 13 -> NONTERM_expr 
    | 14 -> NONTERM_expr 
    | 15 -> NONTERM_expr 
    | 16 -> NONTERM_expr 
    | 17 -> NONTERM_expr 
    | 18 -> NONTERM_expr 
    | 19 -> NONTERM_atExpr 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 44 
let _fsyacc_tagOfErrorTerminal = 42

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | FN  -> "FN" 
  | FUN  -> "FUN" 
  | LOCAL  -> "LOCAL" 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | LT  -> "LT" 
  | LTE  -> "LTE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | APPEND  -> "APPEND" 
  | SEMICOLON  -> "SEMICOLON" 
  | ARROW  -> "ARROW" 
  | ARROWT  -> "ARROWT" 
  | COL  -> "COL" 
  | NOT  -> "NOT" 
  | HD  -> "HD" 
  | TL  -> "TL" 
  | ISE  -> "ISE" 
  | LIST  -> "LIST" 
  | PRINT  -> "PRINT" 
  | ELSE  -> "ELSE" 
  | END  -> "END" 
  | FALSE  -> "FALSE" 
  | IF  -> "IF" 
  | IN  -> "IN" 
  | LET  -> "LET" 
  | THEN  -> "THEN" 
  | TRUE  -> "TRUE" 
  | NULL  -> "NULL" 
  | REC  -> "REC" 
  | BOOL  -> "BOOL" 
  | INT  -> "INT" 
  | UNIT  -> "UNIT" 
  | VAR  -> "VAR" 
  | ELISTC  -> "ELISTC" 
  | NAME _ -> "NAME" 
  | CSNINT _ -> "CSNINT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | FN  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | LOCAL  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LTE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | APPEND  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | ARROWT  -> (null : System.Object) 
  | COL  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | HD  -> (null : System.Object) 
  | TL  -> (null : System.Object) 
  | ISE  -> (null : System.Object) 
  | LIST  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | REC  -> (null : System.Object) 
  | BOOL  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | UNIT  -> (null : System.Object) 
  | VAR  -> (null : System.Object) 
  | ELISTC  -> (null : System.Object) 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSNINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 19us; 65535us; 0us; 2us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 31us; 21us; 32us; 22us; 33us; 23us; 34us; 24us; 35us; 25us; 36us; 26us; 37us; 27us; 38us; 28us; 39us; 29us; 40us; 30us; 19us; 65535us; 0us; 4us; 5us; 4us; 7us; 4us; 9us; 4us; 11us; 4us; 13us; 4us; 15us; 4us; 17us; 4us; 19us; 4us; 31us; 4us; 32us; 4us; 33us; 4us; 34us; 4us; 35us; 4us; 36us; 4us; 37us; 4us; 38us; 4us; 39us; 4us; 40us; 4us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 23us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 11us; 1us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 1us; 1us; 1us; 2us; 1us; 3us; 11us; 3us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 1us; 3us; 11us; 3us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 1us; 3us; 11us; 3us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 1us; 4us; 11us; 4us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 1us; 5us; 11us; 5us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 1us; 6us; 11us; 6us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 1us; 7us; 11us; 7us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 1us; 8us; 11us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 11us; 9us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 11us; 9us; 10us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 11us; 9us; 10us; 11us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 11us; 9us; 10us; 11us; 12us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 11us; 9us; 10us; 11us; 12us; 13us; 13us; 14us; 15us; 16us; 17us; 18us; 11us; 9us; 10us; 11us; 12us; 13us; 14us; 14us; 15us; 16us; 17us; 18us; 11us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 15us; 16us; 17us; 18us; 11us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 16us; 17us; 18us; 11us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 17us; 18us; 11us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 18us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 16us; 18us; 20us; 22us; 34us; 36us; 48us; 50us; 62us; 64us; 76us; 78us; 90us; 92us; 104us; 106us; 118us; 120us; 132us; 144us; 156us; 168us; 180us; 192us; 204us; 216us; 228us; 240us; 252us; 254us; 256us; 258us; 260us; 262us; 264us; 266us; 268us; 270us; 272us; |]
let _fsyacc_action_rows = 42
let _fsyacc_actionTableElements = [|7us; 32768us; 19us; 11us; 20us; 13us; 21us; 15us; 22us; 17us; 24us; 19us; 28us; 5us; 40us; 41us; 0us; 49152us; 11us; 32768us; 0us; 3us; 6us; 35us; 7us; 36us; 8us; 37us; 9us; 38us; 10us; 31us; 11us; 32us; 12us; 33us; 13us; 34us; 14us; 39us; 15us; 40us; 0us; 16385us; 0us; 16386us; 7us; 32768us; 19us; 11us; 20us; 13us; 21us; 15us; 22us; 17us; 24us; 19us; 28us; 5us; 40us; 41us; 11us; 32768us; 6us; 35us; 7us; 36us; 8us; 37us; 9us; 38us; 10us; 31us; 11us; 32us; 12us; 33us; 13us; 34us; 14us; 39us; 15us; 40us; 31us; 7us; 7us; 32768us; 19us; 11us; 20us; 13us; 21us; 15us; 22us; 17us; 24us; 19us; 28us; 5us; 40us; 41us; 11us; 32768us; 6us; 35us; 7us; 36us; 8us; 37us; 9us; 38us; 10us; 31us; 11us; 32us; 12us; 33us; 13us; 34us; 14us; 39us; 15us; 40us; 25us; 9us; 7us; 32768us; 19us; 11us; 20us; 13us; 21us; 15us; 22us; 17us; 24us; 19us; 28us; 5us; 40us; 41us; 9us; 16387us; 6us; 35us; 7us; 36us; 8us; 37us; 9us; 38us; 10us; 31us; 11us; 32us; 12us; 33us; 13us; 34us; 14us; 39us; 7us; 32768us; 19us; 11us; 20us; 13us; 21us; 15us; 22us; 17us; 24us; 19us; 28us; 5us; 40us; 41us; 0us; 16388us; 7us; 32768us; 19us; 11us; 20us; 13us; 21us; 15us; 22us; 17us; 24us; 19us; 28us; 5us; 40us; 41us; 0us; 16389us; 7us; 32768us; 19us; 11us; 20us; 13us; 21us; 15us; 22us; 17us; 24us; 19us; 28us; 5us; 40us; 41us; 0us; 16390us; 7us; 32768us; 19us; 11us; 20us; 13us; 21us; 15us; 22us; 17us; 24us; 19us; 28us; 5us; 40us; 41us; 0us; 16391us; 7us; 32768us; 19us; 11us; 20us; 13us; 21us; 15us; 22us; 17us; 24us; 19us; 28us; 5us; 40us; 41us; 0us; 16392us; 2us; 16393us; 12us; 33us; 13us; 34us; 2us; 16394us; 12us; 33us; 13us; 34us; 0us; 16395us; 0us; 16396us; 7us; 16397us; 8us; 37us; 9us; 38us; 10us; 31us; 11us; 32us; 12us; 33us; 13us; 34us; 14us; 39us; 7us; 16398us; 8us; 37us; 9us; 38us; 10us; 31us; 11us; 32us; 12us; 33us; 13us; 34us; 14us; 39us; 7us; 16399us; 8us; 37us; 9us; 38us; 10us; 31us; 11us; 32us; 12us; 33us; 13us; 34us; 14us; 39us; 7us; 16400us; 8us; 37us; 9us; 38us; 10us; 31us; 11us; 32us; 12us; 33us; 13us; 34us; 14us; 39us; 5us; 16401us; 10us; 31us; 11us; 32us; 12us; 33us; 13us; 34us; 14us; 39us; 10us; 16402us; 6us; 35us; 7us; 36us; 8us; 37us; 9us; 38us; 10us; 31us; 11us; 32us; 12us; 33us; 13us; 34us; 14us; 39us; 15us; 40us; 7us; 32768us; 19us; 11us; 20us; 13us; 21us; 15us; 22us; 17us; 24us; 19us; 28us; 5us; 40us; 41us; 7us; 32768us; 19us; 11us; 20us; 13us; 21us; 15us; 22us; 17us; 24us; 19us; 28us; 5us; 40us; 41us; 7us; 32768us; 19us; 11us; 20us; 13us; 21us; 15us; 22us; 17us; 24us; 19us; 28us; 5us; 40us; 41us; 7us; 32768us; 19us; 11us; 20us; 13us; 21us; 15us; 22us; 17us; 24us; 19us; 28us; 5us; 40us; 41us; 7us; 32768us; 19us; 11us; 20us; 13us; 21us; 15us; 22us; 17us; 24us; 19us; 28us; 5us; 40us; 41us; 7us; 32768us; 19us; 11us; 20us; 13us; 21us; 15us; 22us; 17us; 24us; 19us; 28us; 5us; 40us; 41us; 7us; 32768us; 19us; 11us; 20us; 13us; 21us; 15us; 22us; 17us; 24us; 19us; 28us; 5us; 40us; 41us; 7us; 32768us; 19us; 11us; 20us; 13us; 21us; 15us; 22us; 17us; 24us; 19us; 28us; 5us; 40us; 41us; 7us; 32768us; 19us; 11us; 20us; 13us; 21us; 15us; 22us; 17us; 24us; 19us; 28us; 5us; 40us; 41us; 7us; 32768us; 19us; 11us; 20us; 13us; 21us; 15us; 22us; 17us; 24us; 19us; 28us; 5us; 40us; 41us; 0us; 16403us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 8us; 9us; 21us; 22us; 23us; 31us; 43us; 51us; 63us; 71us; 81us; 89us; 90us; 98us; 99us; 107us; 108us; 116us; 117us; 125us; 126us; 129us; 132us; 133us; 134us; 142us; 150us; 158us; 166us; 172us; 183us; 191us; 199us; 207us; 215us; 223us; 231us; 239us; 247us; 255us; 263us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 6us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16403us; |]
let _fsyacc_reductions ()  =    [| 
# 339 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 348 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                                         _1 
                   )
# 41 "Parser.fsy"
                 : Absyn.expr));
# 359 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser.fsy"
                                        _1						 
                   )
# 45 "Parser.fsy"
                 : Absyn.expr));
# 370 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                                        (If (_2, _4, _6), AnyT)	 
                   )
# 47 "Parser.fsy"
                 : Absyn.expr));
# 383 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                          (Op1 ("not", _2), AnyT)	 
                   )
# 48 "Parser.fsy"
                 : Absyn.expr));
# 394 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser.fsy"
                                         (Op1 ("hd", _2), AnyT)	 
                   )
# 49 "Parser.fsy"
                 : Absyn.expr));
# 405 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                                         (Op1 ("tl",  _2), AnyT)	 
                   )
# 50 "Parser.fsy"
                 : Absyn.expr));
# 416 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                          (Op1 ("ise",  _2), AnyT)   
                   )
# 51 "Parser.fsy"
                 : Absyn.expr));
# 427 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                           (Op1 ("print", _2), AnyT)	 
                   )
# 52 "Parser.fsy"
                 : Absyn.expr));
# 438 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                               (Op2 ("+",  _1, _3), AnyT) 
                   )
# 53 "Parser.fsy"
                 : Absyn.expr));
# 450 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                               (Op2 ("-",  _1, _3), AnyT) 
                   )
# 54 "Parser.fsy"
                 : Absyn.expr));
# 462 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                               (Op2 ("*",  _1, _3), AnyT) 
                   )
# 55 "Parser.fsy"
                 : Absyn.expr));
# 474 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                               (Op2 ("/",  _1, _3), AnyT) 
                   )
# 56 "Parser.fsy"
                 : Absyn.expr));
# 486 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                                               (Op2 ("=",  _1, _3), AnyT) 
                   )
# 57 "Parser.fsy"
                 : Absyn.expr));
# 498 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                               (Op2 ("<>", _1, _3), AnyT) 
                   )
# 58 "Parser.fsy"
                 : Absyn.expr));
# 510 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                               (Op2 ("<",  _1, _3), AnyT) 
                   )
# 59 "Parser.fsy"
                 : Absyn.expr));
# 522 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                               (Op2 ("=", _1, _3), AnyT)	 
                   )
# 60 "Parser.fsy"
                 : Absyn.expr));
# 534 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                                                 (Op2 ("::", _1, _3), AnyT) 
                   )
# 61 "Parser.fsy"
                 : Absyn.expr));
# 546 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                                   (Op2 (";", _1, _3), AnyT)	 
                   )
# 62 "Parser.fsy"
                 : Absyn.expr));
# 558 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                       (Var (_1),  AnyT)              
                   )
# 67 "Parser.fsy"
                 : Absyn.expr));
|]
# 570 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 45;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.expr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
